1. Online form for parents to fill out
  - use AWS html form to keep data encrypted and upload to RDS with encryption
  - User Login page for parents of camp participants - on login redirects to form
  - New User Registration: register a new user then redirect to a new camper registration page
  - new camper registration page asks for details about the camper: name, address, age, etc.
  - form page: general page with add functionality to add new medicine details which contain medicine name, required dosage, notes
2. Store data in RDS
3. Make data accessible to medical staff (make a get call to API for that camper at that time, which med and how much?)
4. Tablets for medical staff, only they can get on secure VPN
5. Create 'schedule' based on the information provided in the online form 
   - TODO: how to genearate the 'schedule' based on the input from the parents?
   - privacy issue -QR code on wrist band and medication bottle
   - Medical staff able to check off when medication is given and synchronizes with 'database'
   - be able to summarize medications given for parents, emergencies, other reasons?
6. Collect/analyze anonymous data about campers for engagement
  - Regions where the campers are from
  - number of returning users
  - count plot of how many times they have come in the past
  - age distribution


ToDo: Keep updating the description section with a human-readable, non-technical description of what our application does and how it works.
Description:

Our application is a secure website where parents can input all of their child's information, including their medical information, and it will be stored for use by the medical staff. We will use AWS an html form to keep data encrypted and upload to RDS with encryption to keep the data secure. At the camp, the medical staff will have tablets on a secure VPN so that only they can access the camper's medical information. Based on the campers' medical information, a schedule is created for each time period when medication is administered. 

When it's time to administer medication, the medical staff will scan a QR code on the camper's wrist band, which will bring up their information and medication schedule. The camper's medication bottle can also have the same QR code to minimize errors with campers getting the wrong medication. After giving the medication, the medical staff can click a button to indicate that they have given the medication, and it will update the database with the dosage, date and time. Because the tablets are on wifi, any other medical staff will see that the camper's medication schedule has been updated. 

Using this schedule, a summary of medications given for that child can be generated daily or weekly to send to the parent for their peace of mind, or in case of medical emergencies to be given to hospital staff. We could also add some kind of reminder or alarm that would go off if a child is overdue for receiving medication. 

Based on the camper's anonymous and non-private information, we have generated visual representations of the regions where the campers are from, age distribution, and how many kids return to camp year after year. This information can be used to help families decide to send their child to the camp and help them to see the number of other families in their area who are going through similar situations. This can help the families to see that they are not alone and motivate them to connect with one another for support.



ToDo: Keep updating the instructions section with any other special instructions or notes that we think of
Instructions / Requirements / Notes:

For our MVP version of this application, we've mocked some things that would be too time consuming or too expensive to set up in just one weekend. For our ideal version, we would use an AWS html form linked to an S3 bucket and an RDS to store the data securely. For our MVP version, we've created the form in Angular and set up an API using Django to simulate what would happen when the medical staff scans the QR code on the camper's wristband. We've simulated the medical staff giving the medication by clicking the button which sends another API call to mark that that medication was given at that time. Our database would ideally be an RDS, but for this weekend we decided to set up a mock database.

